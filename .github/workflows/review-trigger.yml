name: CodeRabbit PR Processor

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
    
permissions:
  contents: read
  pull-requests: write
  issues: write

# Global environment variables
env:
  ORG_NAME: 'roopxx'
  RATE_LIMIT_MINUTES: 5
  
jobs:
  # Apply labels to PRs based on files changed
  labeler:
    name: PR Labeler
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request_target'
    steps:
    - uses: actions/labeler@v5
      with:
        repo-token: ${{ secrets.BOT_TOKEN }}
        sync-labels: true
        configuration-path: .github/labeler.yml

  # Trigger CodeRabbit review with rate limiting
  trigger-coderabbit-review:
    name: Trigger CodeRabbit Review
    runs-on: ubuntu-latest
    # Run on new/updated PRs or when review comment is posted
    if: >-
      github.event_name == 'pull_request_target' || 
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '@coderabbitai review'))
    outputs:
      is_internal: ${{ steps.org_membership.outputs.result }}
      is_rate_limited: ${{ steps.check_comment_rate_limit.outputs.result == 'rate-limited' }}
      review_triggered: ${{ steps.trigger_review.outcome == 'success' }}
    
    steps:
      # Step 1: Get PR number based on event type
      - name: Get PR number from comment
        id: get_pr_from_comment
        if: github.event_name == 'issue_comment'
        run: echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
      
      - name: Get PR number from PR event
        id: get_pr_from_event
        if: github.event_name == 'pull_request_target'
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      # Step 2: Check if PR author is an organization member
      - name: Check organization membership
        id: org_membership
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          result-encoding: string
          script: |
            try {
              const org = process.env.ORG_NAME;
              let username;
              
              if (context.eventName === 'pull_request_target') {
                username = context.payload.pull_request.user.login;
              } else if (context.eventName === 'issue_comment') {
                // Get PR details to find author
                const { data: pullRequest } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: process.env.PR_NUMBER
                });
                username = pullRequest.user.login;
              }
              
              console.log(`Checking if ${username} is a member of ${org} organization`);
              
              try {
                await github.rest.orgs.checkMembershipForUser({
                  org: org,
                  username: username
                });
                console.log(`${username} is a member of ${org}`);
                return 'true'; // User is a member
              } catch (error) {
                if (error.status === 404) {
                  console.log(`${username} is not a member of ${org}`);
                  return 'false'; // User is not a member
                }
                throw error; // Re-throw other errors
              }
            } catch (error) {
              console.error(`Error checking membership: ${error.message}`);
              if (error.response) {
                console.error(`Status: ${error.response.status}, Headers: ${JSON.stringify(error.response.headers)}`);
              }
              return 'false'; // Default to false on error to avoid blocking reviews
            }
      
      # Step 3: Label internal PRs and skip review
      - name: Apply internal PR label
        if: steps.org_membership.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || secrets.BOT_TOKEN }}
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.PR_NUMBER,
                labels: ['internal-pr']
              });
              console.log('Added internal-pr label');
            } catch (error) {
              console.error(`Error adding internal-pr label: ${error.message}`);
              // Non-fatal error, continue workflow
            }

      - name: Log internal PR info
        if: steps.org_membership.outputs.result == 'true'
        run: |
          echo "Skipping CodeRabbit review for internal PR from organization member"
          
      # Step 4: Check for recent CodeRabbit comments (rate limiting)
      - name: Check for recent reviews
        id: check_comment_rate_limit
        if: steps.org_membership.outputs.result == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          result-encoding: string
          script: |
            try {
              const rateLimitMinutes = parseInt(process.env.RATE_LIMIT_MINUTES);
              const now = new Date();
              const cutoffTime = new Date(now.getTime() - (rateLimitMinutes * 60 * 1000));
              const prNumber = process.env.PR_NUMBER;
              
              console.log(`Checking rate limit by comment time (${rateLimitMinutes} minute window) for PR #${prNumber}`);
              
              // Get recent PR comments
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                per_page: 100
              });
              
              // Find CodeRabbit related comments (bot comments or review triggers)
              const coderabbitComments = comments.filter(comment => 
                (comment.user.login === 'coderabbitai[bot]' || 
                 comment.body.includes('@coderabbitai review'))
              ).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              
              if (coderabbitComments.length > 0) {
                const lastCommentTime = new Date(coderabbitComments[0].created_at);
                
                console.log(`Last CodeRabbit comment was at: ${lastCommentTime.toISOString()}`);
                console.log(`Cutoff time for rate limiting: ${cutoffTime.toISOString()}`);
                
                if (lastCommentTime > cutoffTime) {
                  // Within rate limit window - deny new review
                  const minutesRemaining = Math.round(
                    (lastCommentTime.getTime() + rateLimitMinutes * 60 * 1000 - now.getTime()) / 60000
                  );
                  console.log(`PR is rate limited (${minutesRemaining} minutes remaining)`);
                  
                  // Only notify on manual comment triggers
                  if (context.eventName === 'issue_comment') {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      body: `⏱️ **Rate limit active:** This PR has been reviewed recently. Please wait ${minutesRemaining} more minutes before requesting another review.`
                    });
                  }
                  
                  return 'rate-limited';
                }
              }
              
              // Not rate limited
              return 'proceed';
            } catch (error) {
              console.error(`Error checking comment rate limit: ${error.message}`);
              // On error, default to proceeding with review to avoid blocking
              return 'proceed';
            }
      
      # Step 5: Checkout repository to access any needed files
      - name: Checkout Repository
        if: steps.org_membership.outputs.result == 'false' && steps.check_comment_rate_limit.outputs.result == 'proceed'
        uses: actions/checkout@v4
      
      # Step 6: Post CodeRabbit review trigger comment
      - name: Trigger CodeRabbit Review
        id: trigger_review
        if: >-
          steps.org_membership.outputs.result == 'false' && 
          steps.check_comment_rate_limit.outputs.result == 'proceed' && 
          github.event_name == 'pull_request_target'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "@coderabbitai review"
      
      # Step 7: Add pending label to track review status
      - name: Apply review pending label
        if: >-
          steps.org_membership.outputs.result == 'false' && 
          steps.check_comment_rate_limit.outputs.result == 'proceed' && 
          success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.PR_NUMBER,
                labels: ['review-pending']
              });
              console.log('Added review-pending label');
            } catch (error) {
              console.error(`Error adding review-pending label: ${error.message}`);
              // Non-fatal error, continue workflow
            }
  
  # Record metrics for dashboard and monitoring
  record-metrics:
    name: Record Metrics
    runs-on: ubuntu-latest
    needs: trigger-coderabbit-review
    if: always()
    steps:
      - name: Record PR Metrics
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || secrets.BOT_TOKEN }}
          script: |
            try {
              const date = new Date().toISOString().split('T')[0];
              const prNumber = process.env.PR_NUMBER || 
                (context.eventName === 'pull_request_target' ? 
                  context.payload.pull_request.number : 
                  context.payload.issue.number);
              
              const metrics = {
                date: date,
                pr: prNumber,
                repo: context.repo.repo,
                authorAction: context.actor,
                eventType: context.eventName,
                internal: ${{ needs.trigger-coderabbit-review.outputs.is_internal || 'false' }},
                rateLimited: ${{ needs.trigger-coderabbit-review.outputs.is_rate_limited || 'false' }},
                reviewTriggered: ${{ needs.trigger-coderabbit-review.outputs.review_triggered || 'false' }}
              };
              
              // Log metrics for dashboard integration
              console.log('PR Review Metrics:', JSON.stringify(metrics, null, 2));
            } catch (error) {
              console.error(`Error recording metrics: ${error.message}`);
              // Non-fatal error, continue workflow
            }