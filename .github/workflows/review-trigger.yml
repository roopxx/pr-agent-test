name: CodeRabbit Auto-Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    
permissions:
  contents: read
  pull-requests: write
  issues: write

# Global environment variables
env:
  ORG_NAME: 'roopxx'
  RATE_LIMIT_MINUTES: 5
  RATE_LIMIT_LABEL: 'rate-limited'
  
jobs:
  trigger-coderabbit-review:

    name: Trigger CodeRabbit Review
    runs-on: ubuntu-latest
    outputs:
      is_internal: ${{ steps.org_membership.outputs.result }}
      is_rate_limited: ${{ steps.api_rate_limit.outputs.result == 'rate-limited' }}
      review_triggered: ${{ steps.trigger_review.outcome == 'success' }}
    
    steps:
      - name: Check if organization member
        id: org_membership
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          result-encoding: string
          script: |
            try {
              const org = process.env.ORG_NAME; // Using environment variable
              const username = context.payload.pull_request.user.login;
              
              console.log(`Checking if ${username} is a member of ${org} organization`);
              
              const result = await github.rest.orgs.checkMembershipForUser({
                org: org,
                username: username
              }).then(() => {
                console.log(`${username} is a member of ${org}`);
                return 'true'; // User is a member
              }).catch((error) => {
                if (error.status === 404) {
                  console.log(`${username} is not a member of ${org}`);
                  return 'false'; // User is not a member
                }
                throw error; // Re-throw other errors
              });
              
              return result;
            } catch (error) {
              console.error(`Error checking membership: ${error.message}`);
              // Log detailed error information for troubleshooting
              if (error.response) {
                console.error(`Status: ${error.response.status}, Headers: ${JSON.stringify(error.response.headers)}`);
              }
              return 'false'; // Default to false on error
            }
          
      - name: Record internal PR metrics
        if: steps.org_membership.outputs.result == 'true'
        run: |
          echo "Skipping CodeRabbit review for internal PR from organization member: ${{ github.event.pull_request.user.login }}"
          
      # Improved rate limiting using GitHub API instead of filesystem
      - name: Check API-based Rate Limit
        id: api_rate_limit
        if: steps.org_membership.outputs.result == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          result-encoding: string
          script: |
            try {
              const rateLimitMinutes = parseInt(process.env.RATE_LIMIT_MINUTES);
              const rateLimitLabel = process.env.RATE_LIMIT_LABEL;
              const now = new Date();
              const cutoffTime = new Date(now.getTime() - (rateLimitMinutes * 60 * 1000));
              
              console.log(`Checking rate limit using GitHub API state (${rateLimitMinutes} minute window)`);
              
              // Check if the rate limit label exists on this PR
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const hasRateLimitLabel = labels.some(label => label.name === rateLimitLabel);
              
              if (hasRateLimitLabel) {
                // Get PR timeline to find when the label was added
                const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  per_page: 100
                });
                
                // Find the most recent labeled event for our rate limit label
                const labelEvents = timeline.filter(event => 
                  event.event === 'labeled' && event.label && event.label.name === rateLimitLabel
                ).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                
                if (labelEvents.length > 0) {
                  const lastLabelTime = new Date(labelEvents[0].created_at);
                  
                  console.log(`Rate limit label was last added at: ${lastLabelTime.toISOString()}`);
                  console.log(`Cutoff time for rate limiting: ${cutoffTime.toISOString()}`);
                  
                  if (lastLabelTime > cutoffTime) {
                    // Still within rate limit window
                    console.log(`PR is still rate limited (${Math.round((lastLabelTime - cutoffTime) / 1000 / 60)} minutes remaining)`);
                    return 'rate-limited';
                  } else {
                    // Rate limit expired, remove the label
                    console.log('Rate limit expired, removing label');
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                      name: rateLimitLabel
                    });
                  }
                }
              }
              
              // Not rate limited
              return 'proceed';
            } catch (error) {
              console.error(`Error checking rate limit: ${error.message}`);
              // Fall back to proceeding if there's an error checking the rate limit
              return 'proceed';
            }
          
      - name: Apply rate limit label
        if: steps.org_membership.outputs.result == 'false' && steps.api_rate_limit.outputs.result == 'proceed'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['${{ env.RATE_LIMIT_LABEL }}']
            });
            console.log('Applied rate limit label for tracking');
          
      - name: Checkout Repository
        if: steps.org_membership.outputs.result == 'false' && steps.api_rate_limit.outputs.result == 'proceed'
        uses: actions/checkout@v4
      
      - name: Post Comment to Trigger CodeRabbit
        id: trigger_review
        if: steps.org_membership.outputs.result == 'false' && steps.api_rate_limit.outputs.result == 'proceed'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "@coderabbitai review"
          
      - name: Add Pending Label
        if: steps.org_membership.outputs.result == 'false' && steps.api_rate_limit.outputs.result == 'proceed' && success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            try {
              // Using REST API to explicitly preserve the token identity
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['review-pending']
              });
              console.log('Added review-pending label');
            } catch (error) {
              console.error(`Error adding label: ${error.message}`);
              // Continue workflow even if label fails
            }
          
      - name: Label Internal PR
        if: steps.org_membership.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || secrets.BOT_TOKEN }}
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['internal-pr']
              });
              console.log('Added internal-pr label');
            } catch (error) {
              console.error(`Error adding label: ${error.message}`);
              // Continue workflow even if label fails
            }
  
  # Separate job for recording metrics to ensure it has access to job outputs
  record-metrics:
    name: Record Metrics
    runs-on: ubuntu-latest
    needs: trigger-coderabbit-review
    if: always()
    steps:
      - name: Record PR Metrics
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN || secrets.BOT_TOKEN }}
          script: |
            const date = new Date().toISOString().split('T')[0];
            const metrics = {
              date: date,
              pr: context.payload.pull_request.number,
              repo: context.repo.repo,
              author: context.payload.pull_request.user.login,
              internal: ${{ needs.trigger-coderabbit-review.outputs.is_internal || 'false' }},
              rateLimited: ${{ needs.trigger-coderabbit-review.outputs.is_rate_limited || 'false' }},
              reviewTriggered: ${{ needs.trigger-coderabbit-review.outputs.review_triggered || 'false' }}
            };
            
            // Log metrics for debugging
            console.log('PR Review Metrics:', JSON.stringify(metrics, null, 2));