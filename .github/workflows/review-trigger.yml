name: CodeRabbit Auto-Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  trigger-coderabbit-review:
    name: Trigger CodeRabbit Review
    runs-on: ubuntu-latest
    
    steps:
      - name: Check if organization member
        id: org_membership
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          result-encoding: string
          script: |
            try {
              const org = 'roopxx'; // Your organization name
              const username = context.payload.pull_request.user.login;
              
              const result = await github.rest.orgs.checkMembershipForUser({
                org: org,
                username: username
              }).then(() => {
                return 'true'; // User is a member
              }).catch((error) => {
                if (error.status === 404) {
                  return 'false'; // User is not a member
                }
                throw error;
              });
              
              return result;
            } catch (error) {
              console.log(`Error checking membership: ${error}`);
              return 'false'; // Default to false on error
            }
          
      - name: Check Rate Limit
        id: check_rate_limit
        if: steps.org_membership.outputs.result == 'false'
        run: |
          # Get current time in seconds since epoch
          CURRENT_TIME=$(date +%s)
          
          # Check if we've triggered a review in the last 5 minutes
          if [ -f "/tmp/last_review_time.txt" ]; then
            LAST_TIME=$(cat /tmp/last_review_time.txt)
            DIFF=$((CURRENT_TIME - LAST_TIME))
            
            if [ $DIFF -lt 300 ]; then
              echo "should_skip=true" >> $GITHUB_OUTPUT
              echo "Rate limited - last review was $DIFF seconds ago"
            else
              echo "should_skip=false" >> $GITHUB_OUTPUT
              echo $CURRENT_TIME > /tmp/last_review_time.txt
            fi
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo $CURRENT_TIME > /tmp/last_review_time.txt
          fi
      
      - name: Trigger Review for External PR
        if: steps.org_membership.outputs.result == 'false' && steps.check_rate_limit.outputs.should_skip != 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "@coderabbitai review"
          
      - name: Label External PR as Pending Review
        if: steps.org_membership.outputs.result == 'false' && steps.check_rate_limit.outputs.should_skip != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['review-pending']
            });
            
      - name: Send Review Notification
        if: steps.org_membership.outputs.result == 'false' && steps.check_rate_limit.outputs.should_skip != 'true'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "CodeRabbit review triggered for PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}\nAuthor: ${{ github.event.pull_request.user.login }}\nURL: ${{ github.event.pull_request.html_url }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Label Internal PR
        if: steps.org_membership.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['internal-pr']
            });